/**
 * This template file was generated by dynaTrace client.
 * The dynaTrace community portal can be found here: http://community.dynatrace.com/
 * For information how to publish a plugin please visit http://community.dynatrace.com/plugins/contribute/
 **/

package com.dynatrace.diagnostics.jira;

import java.io.IOException;
import java.util.Collection;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;

import net.rcarz.jiraclient.BasicCredentials;
import net.rcarz.jiraclient.Field;
import net.rcarz.jiraclient.Issue;
import net.rcarz.jiraclient.Issue.FluentCreate;
import net.rcarz.jiraclient.IssueType;
import net.rcarz.jiraclient.JiraClient;
import net.rcarz.jiraclient.JiraException;
import net.rcarz.jiraclient.Project;

import com.dynatrace.diagnostics.pdk.Action;
import com.dynatrace.diagnostics.pdk.ActionEnvironment;
import com.dynatrace.diagnostics.pdk.Incident;
import com.dynatrace.diagnostics.pdk.Status;
import com.dynatrace.diagnostics.pdk.Violation;
import com.dynatrace.diagnostics.sdk.resources.BaseConstants;

public class CreateIssueActionPlugin implements Action {
	private static final Logger log = Logger
			.getLogger(CreateIssueActionPlugin.class.getName());

	@Override
	public Status setup(ActionEnvironment env) throws Exception {
		return new Status(Status.StatusCode.Success);
	}

	@Override
	// Initialize fields
	public Status execute(ActionEnvironment env) throws Exception {
		log.info("----------------------Executing JIRA - Create Issue Action Plugin-----------------------------");

		String jiraUrl = env.getConfigString("jira_url");
		String jiraUsername = env.getConfigString("jira_username");
		String jiraPassword = env.getConfigPassword("jira_password");
		String jiraProjectKey = env.getConfigString("jira_projectKey");
		String jiraIssueType = env.getConfigString("jira_issueType");
		String jiraReporter = env.getConfigString("jira_reporter");
		String jiraAssignee = env.getConfigString("jira_assignee");

		log.info("Parameters are: jiraURL= " + jiraUrl + ", jiraUsername= "
				+ jiraUsername + ", jiraPassword= *******, jiraProjectName= "
				+ jiraProjectKey + ", jiraIssueTypeName= " + jiraIssueType);

		if (jiraUrl == null || jiraUsername == null || jiraPassword == null
				|| jiraProjectKey == null || jiraIssueType == null
				|| jiraUrl.isEmpty() || jiraUsername.isEmpty()
				|| jiraPassword.isEmpty() || jiraProjectKey.isEmpty()
				|| jiraIssueType.isEmpty()) {
			log.severe("Message=\"Required parameters to create issue in JIRA not present\"");
			// For easier testing the plugin will continue even without all its
			// required parameters
			// return new
			// Status(Status.StatusCode.ErrorInternalConfigurationProblem);
		}


		log.info("number_of_incidents= " + env.getIncidents().size());

		for (Incident i : env.getIncidents()) {
			final StringBuilder desc = new StringBuilder();
			append(desc, "\n ", i.getIncidentRule().getDescription());
			append(desc, " \n||Details|| ||");
			append(desc, " \n|Severity| ", getSeverityAsString(i), "|");
			append(desc, " \n|Start Time| ", i.getStartTime().toString(), "|");
			append(desc, " \n|End Time| ", i.getEndTime().toString(), "|");
			append(desc, " \n|Duration| ", i.getDuration().toString(), "|");
			append(desc, " \n|Status| ", i.isClosed() ? "Closed" : "Open", "|");
			append(desc, " \n|Server| ", i.getServerName(), "|");

			append(desc, "\n||Incident Rule|| ||");
			append(desc, "  \n|Name | ", i.getIncidentRule().getName(), "|");
			append(desc, "  \n|Trigger Condition | "
					+ i.getIncidentRule().getCondition(), "|");

			if (!i.getViolations().isEmpty()) {
				append(desc, "\n||Violations|| ||");
				for (Violation v : i.getViolations()) {
					append(desc, " \n|   Measure|", v.getViolatedMeasure()
							.getName(), "|");
					append(desc, " \n|   Affected Server| ", v
							.getViolatedMeasure().getSource().toString(), "|");
					append(desc, " \n|   Critical Threshold| ", v
							.getViolatedMeasure().getUpperSevere().getValue()
							.toString(), "|");
					append(desc, " \n|   Warning Threshold| ", v
							.getViolatedMeasure().getUpperWarning().getValue()
							.toString(), "|");
					appendTriggerValues(v, desc);
				}
			}

			// log.info("Description: "+desc.toString());
			String summary = i.getIncidentRule().getName();

			String message="";

			if (jiraUrl != null && !jiraUrl.isEmpty()) {

				BasicCredentials creds = new BasicCredentials(jiraUsername,
						jiraPassword);
				JiraClient jira = new JiraClient(jiraUrl, creds);
				try {

					List<Project> projects = jira.getProjects();
					Boolean isProjectOK = false;
					final StringBuilder availableProjects = new StringBuilder();

					for (Project project : projects) {

						availableProjects.append("\"").append(project.getKey())
								.append("\" ");

						if (project.getKey().equals(jiraProjectKey)) {
							isProjectOK = true;

							project = jira.getProject(project.getKey());
							List<IssueType> types = project.getIssueTypes();
							Boolean isTypeOK = false;
							final StringBuilder availableTypes = new StringBuilder();
							for (IssueType type : types) {

								availableTypes.append("\"")
										.append(type.getName()).append("\" ");

								if (type.getName().equals(jiraIssueType)) {
									isTypeOK = true;
									break;
								}
							}

							if (!isTypeOK) {
								
								message="Unknown Issue type; available types are :  "
										+ availableTypes;
								log.warning(message);
								return new Status(
										Status.StatusCode.ErrorTargetServiceExecutionFailed,
										message);
							}

							break;
						}
					}

					if (!isProjectOK) {
						
						message="Unknown project; available projects are :  "
								+ availableProjects;
						return new Status(
								Status.StatusCode.ErrorTargetServiceExecutionFailed,
								message);
					}

				} catch (JiraException ex) {
					log.severe(ex.getMessage());

					if (ex.getCause() != null)
						log.severe(ex.getCause().getMessage());

					return new Status(
							Status.StatusCode.ErrorTargetServiceExecutionFailed,
							ex.getMessage() + " " + ex.getCause().getMessage());
				}

				try {
					/* Create a new issue. */
					FluentCreate fluent = jira.createIssue(jiraProjectKey,
							jiraIssueType);

					// mandatory fields
					fluent.field(Field.SUMMARY, summary);
					fluent.field(Field.DESCRIPTION, desc);

					// optional fields
					if (!jiraReporter.isEmpty()) {
						fluent.field(Field.REPORTER, jiraReporter);
					}
					if (!jiraAssignee.isEmpty()) {
						fluent.field(Field.ASSIGNEE, jiraAssignee);
					}

					Issue newIssue = fluent.execute();

					log.info("Created Issue : " + newIssue.getKey());

				} catch (JiraException ex) {
					log.log(Level.SEVERE, ex.getMessage());

					if (ex.getCause() != null)
						log.log(Level.SEVERE, ex.getCause().getMessage());

					return new Status(
							Status.StatusCode.ErrorTargetServiceExecutionFailed,
							ex.getCause().getMessage());
				}

				return createJiraIssue(jiraUrl, jiraUsername, jiraPassword,
						jiraProjectKey, jiraIssueType, summary, desc.toString());
			}
		}
		return new Status(Status.StatusCode.Success);
	}

	@Override
	public void teardown(ActionEnvironment env) throws Exception {
	}

	private Status createJiraIssue(String jiraUrl, String jiraUsername,
			String jiraPassword, String jiraProjectName,
			String jiraIssueTypeName, String summary, String description)
			throws IOException {

		return new Status(Status.StatusCode.Success);
	}

	private String getSeverityAsString(Incident incident) {
		if (incident.getSeverity() != null) {
			switch (incident.getSeverity()) {
			case Error:
				return "Severe";
			case Informational:
				return "Informational";
			case Warning:
				return "Warning";
			}
		}
		return "";
	}

	private void append(StringBuilder buf, String... strings) {
		for (String string : strings) {
			buf.append(string);
		}
	}

	private void appendTriggerValues(Violation violation, StringBuilder sb) {
		Collection<Violation.TriggerValue> triggerValues = violation
				.getTriggerValues();

		if (!triggerValues.isEmpty()) {
			for (Violation.TriggerValue triggerValue : triggerValues) {
				append(sb, "  \\n|    ", triggerValue.getSource().toString(),
						": ", triggerValue.getValue().toString(), "|");
				double v = triggerValue.getValue().getValue();
				double t = violation.getViolatedThreshold().getValue()
						.getValue();
				double dif = Math.abs(v - t);
				if (dif != 0) {
					append(sb, " (",
							BaseConstants.FORMAT_INTERNAL_DECIMAL.format(dif),
							violation.getViolatedMeasure().getUnit());
					append(sb, v < t ? " below the threshold"
							: " above the threshold", ")");
				}
			}
		}
	}

}
